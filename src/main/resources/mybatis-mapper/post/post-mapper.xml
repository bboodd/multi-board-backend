<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.multiboardbackend.domain.post.repository.PostRepository">
    <!-- 공통 컬럼 -->
    <sql id="postsColumns">
        p.post_id,
        p.board_type_id,
        p.category_id,
        p.title,
        p.content,
        p.view_count,
        p.created_at,
        p.updated_at,
        p.is_deleted,
        p.is_locked,
        p.is_fixed,
        p.member_id
    </sql>

    <!-- 검색 조건 -->
    <sql id="searchConditions">
        <where>
            <if test="search.startDate != null">
                AND p.created_at >= #{search.startDate}
            </if>
            <if test="search.endDate != null">
                AND p.created_at &lt;= #{search.endDate}
            </if>
            <if test="search.categoryId != null and search.categoryId != 0">
                AND p.category_id = #{search.categoryId}
            </if>
            <if test="search.nickname != null and search.nickname != ''">
                AND m.nickname = #{search.nickname}
            </if>
            <if test="search.keyword != null and search.keyword != ''">
                AND (
                p.title LIKE CONCAT('%', #{search.keyword}, '%')
                OR p.content LIKE CONCAT('%', #{search.keyword}, '%')
                OR m.nickname LIKE CONCAT('%', #{search.keyword}, '%')
                )
            </if>
            AND p.is_deleted = false
            AND p.board_type_id = #{search.boardTypeId}
        </where>
    </sql>

    <!-- 정렬 조건 -->
    <sql id="orderBy">
        ORDER BY
        <choose>
            <when test="search.orderBy == 'categoryId'">p.category_id</when>
            <when test="search.orderBy == 'title'">p.title</when>
            <when test="search.orderBy == 'viewCount'">p.view_count</when>
            <otherwise>p.created_at</otherwise>
        </choose>
        ${search.sortBy}
    </sql>

    <!-- 게시글 등록 -->
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (
            board_type_id,
            category_id,
            title,
            content,
            view_count,
            created_at,
            updated_at,
            is_deleted,
            is_locked,
            is_fixed,
            member_id
        ) VALUES (
            #{boardTypeId},
            #{categoryId},
            #{title},
            #{content},
            0,
            NOW(),
            NOW(),
            false,
            #{locked},
            #{fixed},
            #{memberId}
        )
    </insert>

    <!-- 게시글 수정 -->
    <update id="update">
        UPDATE posts
        SET
            category_id = #{categoryId},
            title = #{title},
            content = #{content},
            updated_at = NOW(),
            is_locked = #{locked}
        WHERE
            post_id = #{id}
          AND is_deleted = false
    </update>

    <!-- 게시글 단건 조회 -->
    <select id="findById" resultType="com.spring.multiboardbackend.domain.post.vo.PostVO">
        SELECT
            <include refid="postsColumns"/>,
            m.nickname,
            c.name as category_name
        FROM
            posts p
            LEFT JOIN members m ON p.member_id = m.member_id
            LEFT JOIN categories c ON p.category_id = c.category_id
        WHERE
            p.post_id = #{id}
            AND p.is_deleted = false
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="findByIdWithDetail" resultType="com.spring.multiboardbackend.domain.post.vo.PostVO">
        SELECT DISTINCT
        <include refid="postsColumns"/>,
        m.nickname,
        c.name as categoryName,
        /* 파일 정보 */
        f.file_id as "files.id",
        f.original_name as "files.originalName",
        f.saved_name as "files.savedName",
        f.saved_path as "files.savedPath",
        f.file_size as "files.fileSize",
        f.file_type as "files.fileType",
        f.content_type as "files.contentType",
        f.created_at as "files.createdAt",
        /* 댓글 정보 */
        cm.comment_id as "comments.id",
        cm.content as "comments.content",
        cm.member_id as "comments.memberId",
        cm.created_at as "comments.createdAt",
        cm.is_deleted as "comments.deleted",
        cm_m.nickname as "comments.nickname"
        FROM
        posts p
        LEFT JOIN members m ON p.member_id = m.member_id
        LEFT JOIN categories c ON p.category_id = c.category_id
        LEFT JOIN files f ON p.post_id = f.post_id
        LEFT JOIN comments cm ON p.post_id = cm.post_id
        LEFT JOIN members cm_m ON cm.member_id = cm_m.member_id
        WHERE
        p.post_id = #{id}
        AND p.is_deleted = false
        ORDER BY
        f.file_id,
        cm.created_at DESC
    </select>
    <!-- 게시글 목록 조회 -->
    <select id="findAllBySearch" resultType="com.spring.multiboardbackend.domain.post.vo.PostVO">
        SELECT
            <include refid="postsColumns"/>,
            m.nickname,
            c.name as category_name,
            (SELECT COUNT(*) FROM files f WHERE f.post_id = p.post_id AND f.file_type = 'ATTACHMENT') as file_count,
            (SELECT COUNT(*) FROM comments cm WHERE cm.post_id = p.post_id) as comment_count,
            (SELECT CONCAT(f.saved_path, '/', f.saved_name)
            FROM files f
            WHERE f.post_id = p.post_id AND f.file_type = 'THUMBNAIL'
            LIMIT 1) as thumbnail_url
        FROM
            posts p
            LEFT JOIN members m ON p.member_id = m.member_id
            LEFT JOIN categories c ON p.category_id = c.category_id
        <include refid="searchConditions"/>
        <include refid="orderBy"/>
        LIMIT #{search.offset}, #{search.size}
    </select>

    <!-- 게시글 개수 조회 -->
    <select id="countBySearch" resultType="int">
        SELECT
            COUNT(*)
        FROM
            posts p
            LEFT JOIN members m ON p.member_id = m.member_id
        <include refid="searchConditions"/>
    </select>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount">
        UPDATE posts
        SET
            view_count = view_count + 1
        WHERE
            post_id = #{id}
          AND is_deleted = false
    </update>

    <!-- 게시글 삭제 -->
    <update id="deleteById">
        UPDATE posts
        SET
            is_deleted = true,
            updated_at = NOW()
        WHERE
            post_id = #{id}
          AND is_deleted = false
    </update>

    <!-- 게시글 존재 여부 확인 -->
    <select id="existsById" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM posts
            WHERE
                post_id = #{id}
              AND is_deleted = false
        )
    </select>
</mapper>